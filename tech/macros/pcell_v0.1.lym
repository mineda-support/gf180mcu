<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># coding: utf-8
# Gf180mcu PCells v0.6, Jan. 3rd 2023 copy right S. Moriyama (Anagix Corporation)
# 
module Gf180mcu
  include MinedaPCell
  mpc = MinedaPCellCommon::new 
  mpc.set_technology 'gf180mcu'
  mpc.set_basic_library 'Gf180mcu_Basic'
  # Remove any definition of our classes (this helps when 
  # reexecuting this code after a change has been applied)
  # Gf180mcu.constants.member?(:Resistor) &amp;&amp; remove_const(:Resistor)
  Gf180mcu.constants.member?(:Nch) &amp;&amp; remove_const(:Nch)
  Gf180mcu.constants.member?(:Pch) &amp;&amp; remove_const(:Pch)
  Gf180mcu.constants.member?(:R_poly) &amp;&amp; remove_const(:R_poly)
  Gf180mcu.constants.member?(:R_ndiff) &amp;&amp; remove_const(:R_ndiff)
  Gf180mcu.constants.member?(:R_pdiff) &amp;&amp; remove_const(:R_pdiff)
  Gf180mcu.constants.member?(:Poly_cap) &amp;&amp; remove_const(:Poly_cap)
  Gf180mcu.constants.member?(:Pdiff_cap) &amp;&amp; remove_const(:Pdiff_cap)
  Gf180mcu.constants.member?(:PCells) &amp;&amp; remove_const(:PCells)

  # The PCell declaration for the Gf180mcu MOSFET
  VIA_SIZE = 0.34.um
  GRID = 0.23.um
  
  class Nch &lt; MinedaNch
    include RBA
    def initialize
      super
      param(:w, TypeDouble, "Nch w", :default =&gt; 0.42.um) # min 0.42 unless exempt: SC
      param(:l, TypeDouble, "Nch l", :default =&gt; 0.15.um)
      # param(:n, TypeInt, "Number of fingers", :default =&gt; 1)
      param(:dg, TypeDouble, "Dumbbell gap", :default =&gt; 0.0.um, :hidden =&gt; true)
      param(:with_pcont, TypeBoolean, "Use polysilicon contact", :default =&gt; true)
      param(:with_via, TypeBoolean, "Put Via over contacts", :default =&gt; true, :hidden =&gt; false)
      param(:with_sdcont, TypeBoolean, "Use source/drain contact", :default =&gt; true)   
      param(:with_psubcont, TypeBoolean, "Use psub contact", :default =&gt; true, :hidden =&gt; false)
      param(:use_pwell, TypeBoolean, "Use pwell", :default =&gt; true, :hidden =&gt; true)  
      param(:wide_metal, TypeBoolean, "Wide metal entry?", :default =&gt; false)
      param(:wtot, TypeDouble, "Total width", :default =&gt; 0, :hidden=&gt; true)
    end
    
    def produce_impl # NMOS
      # nwl_index = layout.insert_layer(LayerInfo::new(64, 20)) # new(3, 0)) # N well
      pwl_index = get_layer_index 'PWL' # layout.insert_layer(LayerInfo::new(64, 44)) # :new(4, 0))
      diff_index = get_layer_index 'DIFF' # layout.insert_layer(LayerInfo::new(65, 20)) # new(2, 0)) # OD
      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(66, 20)) #new(13, 0)) # PO
      m1_index = get_layer_index 'ML1' # layout.insert_layer(LayerInfo::new(68, 20)) # new(24, 0)) # M1
      li1_index = get_layer_index 'li1' # layout.insert_layer(LayerInfo::new(67, 20)) # local interconnect
      parea_index = get_layer_index 'Parea' # layout.insert_layer(LayerInfo::new(94, 20)) # new(20, 0))# P-SD
      narea_index = get_layer_index 'Narea' #layout.insert_layer(LayerInfo::new(93, 44)) # new(19, 0)) # N-SD
      via_index = get_cell_index 'Via' # library_cell('Via', 'Gf180mcu_', layout)
      dcont_index = get_cell_index 'dcont' # library_cell('dcont', 'Gf180mcu_Basic', layout)
      pcont_index = get_cell_index 'pcont' # library_cell('pcont', 'Gf180mcu_Basic', layout)
      # nsubcont_index = library_cell('nsubcont', 'Gf180mcu_Basic', layout)
      psubcont_index = get_cell_index 'psubcont' # library_cell('psubcont', 'Gf180mcu_Basic', layout) 
      indices = {pol: pol_index, diff: diff_index,
        pwl: pwl_index, parea: parea_index, narea: narea_index,
        m1: m1_index, via: via_index, dcont: dcont_index, pcont: pcont_index,
        psubcont: psubcont_index, li1: li1_index}
      vs = (VIA_SIZE/layout.dbu).to_i

      u1 = (GRID/layout.dbu).to_i
      u1cut = (0.02.um/layout.dbu).to_i
      super indices, vs, u1, {u1cut: u1cut, gate_ext: u1-u1cut*2, 
                              dcont_offset: true}
    end
  end

  class Pch &lt; MinedaPch
    include RBA
    def initialize
      super
      param(:w, TypeDouble, "Pch w", :default =&gt; 0.45.um)
      param(:l, TypeDouble, "Pch l", :default =&gt; 0.15.um)
      param(:dg, TypeDouble, "Dumbbell gap", :default =&gt; 0.0.um, :hidden =&gt; true)
      param(:with_pcont, TypeBoolean, "Use polysilicon contact", :default =&gt; true)
      param(:with_via, TypeBoolean, "Put Via over contacts", :default =&gt; true, :hidden =&gt; false)
      param(:with_sdcont, TypeBoolean, "Use source/drain contact", :default =&gt; true)
      param(:with_nsubcont, TypeBoolean, "Use nsub contact", :default =&gt; true, :hidden =&gt; false)
      param(:use_nwell, TypeBoolean, "Use nwell", :default =&gt; true, :hidden =&gt; false) 
      param(:wide_metal, TypeBoolean, "Wide metal entry?", :default =&gt; false)
      param(:wtot, TypeDouble, "Total width", :default =&gt; 0, :hidden=&gt; true)
    end 
    
    def produce_impl # PMOS
      nwl_index = get_layer_index 'NWL' # layout.insert_layer(LayerInfo::new(64, 20)) # new(3, 0)) # N well
      # pwl_index = layout.insert_layer(LayerInfo::new(64, 44)) # :new(4, 0))
      diff_index = get_layer_index 'DIFF' # layout.insert_layer(LayerInfo::new(65, 20)) # new(2, 0)) # OD
      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(66, 20)) #new(13, 0)) # PO
      m1_index = get_layer_index 'ML1' # layout.insert_layer(LayerInfo::new(68, 20)) # new(24, 0)) # M1
      li1_index = get_layer_index 'li1' # layout.insert_layer(LayerInfo::new(67, 20)) # local interconnect
      parea_index = get_layer_index 'Parea' # layout.insert_layer(LayerInfo::new(94, 20)) # new(20, 0))# P-SD
      narea_index = get_layer_index 'Narea' # layout.insert_layer(LayerInfo::new(93, 44)) # new(19, 0)) # N-SD
      via_index = get_cell_index 'Via' # library_cell('Via', 'Gf180mcu_Basic', layout)
      dcont_index = get_cell_index 'dcont' # library_cell('dcont', 'Gf180mcu_Basic', layout)
      pcont_index = get_cell_index 'pcont' # library_cell('pcont', 'Gf180mcu_Basic', layout)
      nsubcont_index = get_cell_index 'nsubcont' # library_cell('nsubcont', 'Gf180mcu_Basic', layout)
      # psubcont_index = library_cell('psubcont', 'Gf180mcu_Basic', layout) 
      indices = {pol: pol_index, diff: diff_index, nwl: nwl_index,
        parea: parea_index, narea: narea_index,
        m1: m1_index, via: via_index, dcont: dcont_index, pcont: pcont_index,
        nsubcont: nsubcont_index, li1: li1_index}
      vs = (VIA_SIZE/layout.dbu).to_i
      u1 = (GRID/layout.dbu).to_i
      u1cut = (0.02.um/layout.dbu).to_i
      super indices, vs, u1, {u1cut: u1cut, gate_ext: u1-u1cut*2, parea_bw: u1*2,
                              pex_delta: u1+u1/2, nwl_bw: 0,
                              dcont_offset: true}
    end
  end
  
  class R_soi &lt; MinedaResistor
    include MinedaPCell
    def initialize
      super
      param(:l, TypeDouble, "Resistor length", :default =&gt; 1.0.um)
      param(:w, TypeDouble, "Resistor width", :default =&gt; 0.2.um)
      param(:n, TypeInt, "Number of maximum stripes", :default =&gt; 1)
      param(:s, TypeDouble, "Space between stripes", :default =&gt; 0.1.um)
      param(:m, TypeDouble, "Maximum stripe length", :default =&gt; 10.0.um)
      param(:ho, TypeBoolean, "Headers outside?", :default =&gt; false)
      param(:rval, TypeDouble, "Resistor value", :default =&gt; 0, :hidden=&gt; true)
    end
    def display_text_impl
      if n &gt; 1
        "R_soi\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s},s=#{s}um =&gt; R=#{rval.round(3)})"
      else
        "R_soi\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval})"
      end
    end
    def produce_impl(indices = {}, head = :narea)
     # tin_index = layout.insert_layer(LayerInfo::new(5, 0))
      indices[:diff] = get_layer_index 'DIFF' # layout.insert_layer(LayerInfo::new(2, 0))
     # cnt_index = layout.insert_layer(LayerInfo::new(21,0))
      indices[:dcont] = get_cell_index 'dcont' # library_cell('dcont', 'Tiascr130_Basic', layout)
      indices[:m1] = get_layer_index 'ML1' # layout.insert_layer(LayerInfo::new(24, 0))
      indices[:m2] = get_layer_index 'ML2' # layout.insert_layer(LayerInfo::new(26, 0))
      indices[:res] = get_layer_index 'RES' # layout.insert_layer(LayerInfo::new(40, 0))
      # via_index = layout.insert_layer(LayerInfo::new(25, 0))
      indices[:via] = get_cell_index 'Via' # library_cell('Via', 'Tiascr130_Basic', layout)
      indices[:parea] = get_layer_index 'Parea' # layout.insert_layer(LayerInfo::new(19, 0))
      indices[:narea] = get_layer_index 'Narea' # layout.insert_layer(LayerInfo::new(20, 0))
      indices[:nwl] = get_layer_index 'NWL' # layout.insert_layer(LayerInfo::new(3, 0)) # N well
      indices[:pwl] = get_layer_index 'PWL' # layout.insert_layer(LayerInfo::new(4, 0))

      vs = (VIA_SIZE/layout.dbu).to_i
      u1 = (GRID/layout.dbu).to_i

      rectangle, rw_ho = super indices, ho ? 1:0, vs, u1
      x1, y1, x2, y2 = rectangle
      [indices, rectangle, u1, rw_ho]
    end
    def coerce_parameters_impl
      sheet_resistance = 250e6
      set_rval(sheet_resistance * l / w)
    end    
  end

  class R_poly &lt; R_soi
    include RBA

    def initialize
      super
#      param(:l, TypeDouble, "Resistor length", :default =&gt; 10.0.um)
#      param(:w, TypeDouble, "Resistor width", :default =&gt; 2.0.um)
    end 

    def display_text_impl
      if n &gt; 1
        "R_poly\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s}, s=#{s}um =&gt; R=#{rval.round(3)})"
      else
        "R_poly\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval.round(3)})"
      end
    end       
    def coerce_parameters_impl
      sheet_resistance = 20
      set_rval(sheet_resistance * l / w)
    end
    def produce_impl
      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(13, 0)) # PO
      pcont_index = get_cell_index 'pcont' # library_cell('pcont', 'Tiascr130_Basic', layout)
      indices = {pol: pol_index, pcont: pcont_index}
      indices, rectangle, u1, rw_ho = super indices
    end
  end

  class HR_poly &lt; R_soi
    include RBA
    def initialize
      super
      param(:l, TypeDouble, "Resistor length", :default =&gt; 23.0.um)
      param(:w, TypeDouble, "Resistor width", :default =&gt; 2.0.um)
    end 

    def display_text_impl
      if n &gt; 1
        "HR_poly\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s}, s=#{s}um =&gt; R=#{rval.round(3)})"
      else
        "HR_poly\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval.round(3)})"
      end
    end   

    def coerce_parameters_impl
      sheet_resistance = 7000
      set_rval(sheet_resistance * l / w)
     end 

    def produce_impl
      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(4, 0)) # PO
      hpol_index = get_layer_index 'HPOL' # layout.insert_layer(LayerInfo::new(33, 0))
      indices = {pol: pol_index, hpol: hpol_index}
      indices, rectangle, u1, rw_ho = super(indices){|vs, rw, prev_x, sl|
        u5 = (5.0.um/layout.dbu).to_i 
        juts = 0
        cell.shapes(hpol_index).insert(Box.new(vs/2-rw/2 -u5 -juts, -u5, prev_x+rw/2 + u5 +juts, sl+u5+vs+vs/2))
        puts "u5=#{u5}, juts=#{juts}"
      }
    end
  end

  class R_ndiff &lt; R_soi
    include RBA
    def display_text_impl
      if n &gt; 1
        "R_ndiff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s},s=#{s}um =&gt; R=#{rval.round(3)})"
      else
        "R_ndiff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval})"
      end
    end
    def produce_impl
      indices, rectangle, u1, rw_ho = super
      x1, y1, x2, y2 = rectangle
      create_box indices[:narea], x1-u1/2, y1-u1/2-rw_ho, x2+u1/2, y2+u1/2
    end
    def coerce_parameters_impl
      sheet_resistance = ENV['SOI_CMOS_NRES'] ? ENV['SOI_CMOS_NRES'].to_f : 81.0  # AIST?:180
      set_rval(sheet_resistance * l / w)
    end
  end

  class R_pdiff &lt; R_soi
    include RBA
    
    def initialize
      super
      param(:use_pwell, TypeBoolean, "Use Pwell", :default =&gt; false)
      param(:use_nwell, TypeBoolean, "Wrap Pwell with Nwell", :default =&gt; false)
    end
    
    def display_text_impl
      if n &gt; 1
        "R_pdiff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s},s=#{s}um =&gt; R=#{rval.round(3)})"
      else
        "R_pdiff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval})"
      end
    end
    def wrap_with_ring index, w, x1, y1, x2, y2
      # points = [Point::new(x1-w, y1-w/2), Point::new(x2+w/2, y1-w/2), Point::new(x2+w/2, y2+w/2), Point::new(x1-w/2, y2+w/2), 
      #          Point::new(x1-w/2, y1)]
      # cell.shapes(index).insert(Path::new(points, w, 0, 0)
      points = [[x1-w, y1], [x1-w, y1-w], [x2+w, y1-w], [x2+w, y2+w], [x1-w, y2+w],
                [x1-w, y1], [x1, y1], [x1, y2], [x2, y2], [x2, y1], [x1, y1]
               ].map{|x, y| Point::new x, y}
      cell.shapes(index).insert(SimplePolygon::new(points))
    end
    def produce_impl
      indices, rectangle, u1, rw_ho = super
      x1, y1, x2, y2 = rectangle     
      create_box indices[:parea], x1-u1/2, y1-u1/2-rw_ho, x2+u1/2, y2+u1/2
      if use_pwell || use_nwell
        u5 = (5.0.um/layout.dbu).to_i
        u3 = (3.0.um/layout.dbu).to_i
        u2 = u5 - u3
        ycenter = (y1-u1/2-rw_ho + y2+u1)/2
        yhalf = [(y1-u1/2-rw_ho - (y2+u1))/2, u5/2].max
        create_box indices[:pwl], x1-u1/2-u3, ycenter-yhalf, [x1-u1+u2, x2+u1/2+u2].max, ycenter+yhalf
        wrap_with_ring indices[:nwl], u5, x1-u1/2-u3, ycenter-yhalf, [x1-u1+u2, x2+u1/2+u2].max, ycenter+yhalf if use_nwell
      end
    end
    def coerce_parameters_impl
      sheet_resistance = ENV['SOI_CMOS_PRES'] ? ENV['SOI_CMOS_PRES'].to_f : 5280  # AIST?: 1520
      set_rval(sheet_resistance * l / w)
    end
  end

  class Poly_cap &lt; MinedaPoly_cap
      def initialize
      # Important: initialize the super class
      super
      param(:l, TypeDouble, "Capacitor length", :default =&gt; 2.0.um)
      param(:w, TypeDouble, "Capacitor width", :default =&gt; 2.0.um)
      param(:cval, TypeDouble, "Capacitor value", :default =&gt; 0, :hidden=&gt; true)
    end
    
    def display_text_impl
      # Provide a descriptive text for the cell
      "Poly Capacitor\r\n(L=#{l.to_s}um,W=#{w.to_s}um,C=#{cval.round(3)})"
    end
    
    def coerce_parameters_impl
      area_cap = 0.115e-15 # 0.23e-15
      set_cval(area_cap * l * w)
    end
    
    def produce_impl
      vs = (VIA_SIZE/layout.dbu).to_i
      u1 = (GRID/layout.dbu).to_i

      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(13, 0)) # PO
      m1_index = get_layer_index 'ML1' # layout.insert_layer(LayerInfo::new(24, 0)) # M1
      m2_index = get_layer_index 'ML2' # layout.insert_layer(LayerInfo::new(26, 0))
      cap_index = get_layer_index 'CAP' # layout.insert_layer(LayerInfo::new(41, 0))
      via_index = get_cell_index 'Via' # library_cell('Via', 'Tiascr130_Basic', layout)
      dcont_index = get_cell_index 'dcont' # library_cell('dcont', 'Tiascr130_Basic', layout)

      indices = {m1: m1_index,  m2: m2_index, cap: cap_index,
                 via: via_index, pol: pol_index, dcont: dcont_index}
      super indices, vs, u1
    end
  end

  class Diff_cap &lt; MinedaDiff_cap
    def initialize
      # Important: initialize the super class
      super
      param(:l, TypeDouble, "Capacitor length", :default =&gt; 2.0.um)
      param(:w, TypeDouble, "Capacitor width", :default =&gt; 2.0.um)
      param(:cval, TypeDouble, "Capacitor value", :default =&gt; 0, :hidden=&gt; true)
    end

    def produce_impl area_index=nil, well_index=nil
      vs = (VIA_SIZE/layout.dbu).to_i
      u1 = (GRID/layout.dbu).to_i
      u2 = u1 + u1

      diff_index = get_layer_index 'DIFF' # layout.insert_layer(LayerInfo::new(2, 0)) # OD
      pol_index = get_layer_index 'POL' # layout.insert_layer(LayerInfo::new(13, 0)) # PO
      m1_index = get_layer_index 'ML1' # layout.insert_layer(LayerInfo::new(24, 0)) # M1
      m2_index = get_layer_index 'ML2' # layout.insert_layer(LayerInfo::new(26, 0))
      cap_index = get_layer_index 'CAP' # layout.insert_layer(LayerInfo::new(41, 0))
      via_index = get_cell_index 'Via' # library_cell('Via', 'Tiascr130_Basic', layout)
      pcont_index = get_cell_index 'pcont' # library_cell('dcont', 'Tiascr130_Basic', layout)
      dcont_index = get_cell_index 'dcont' # library_cell('dcont', 'Tiascr130_Basic', layout)

      indices = {diff: diff_index, pol: pol_index, m1: m1_index, m2: m2_index, 
                cap: cap_index, via: via_index, pcont: pcont_index, dcont: dcont_index}
      super indices, vs, u1, area_index, well_index
    end
  end

  class Ndiff_cap &lt; Diff_cap
    def coerce_parameters_impl
      area_cap = 1.72e-15
      set_cval(area_cap * l * w)
    end

    def produce_impl
      narea_index = get_layer_index 'Narea' # layout.insert_layer(LayerInfo::new(19, 0)) # N-SD
      pwl_index = get_layer_index 'PWL' # layout.insert_layer(LayerInfo::new(4, 0))
      super narea_index, pwl_index   
    end
  end  
  
  class Pdiff_cap &lt; Diff_cap
    def coerce_parameters_impl
      area_cap = 1.72e-15
      set_cval(area_cap * l * w)
    end

    def produce_impl
      parea_index = get_layer_index 'Parea' # layout.insert_layer(LayerInfo::new(18, 0))
      nwl_index = get_layer_index 'NWL' # layout.insert_layer(LayerInfo::new(3, 0))
      super parea_index, nwl_index 
    end
  end

  class Gf180mcu &lt; Library
  
    def initialize  
    
      # 説明を設定
      self.description = "Gf180mcu PCells"
      
      # PCell宣言を作成する
      layout.register_pcell("Nch", Nch::new)
      layout.register_pcell("Pch", Pch::new)
      layout.register_pcell("R_poly", R_poly::new)
      layout.register_pcell("HR_poly", HR_poly::new)
      layout.register_pcell("R_ndiff", R_ndiff::new)
      layout.register_pcell("R_pdiff", R_pdiff::new)
      layout.register_pcell("Poly_cap", Poly_cap::new)
      layout.register_pcell("Ndiff_cap", Ndiff_cap::new)
      layout.register_pcell("Pdiff_cap", Pdiff_cap::new)      
      # "Gf180mcu"という名前で登録します。
      # その名前のライブラリがすでに存在していた場合は、その時点で置き換えられます。
      register("PCells_Gf180mcu")
    end
  end
  
  # ライブラリをインスタンス化して登録する
  Gf180mcu::new
  
end
</text>
</klayout-macro>
